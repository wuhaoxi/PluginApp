package com.wu.lib_audio.mediaplayer.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wu.ft_audio.mediaplayer.model.AudioBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AUDIO_BEAN".
*/
public class AudioBeanDao extends AbstractDao<AudioBean, String> {

    public static final String TABLENAME = "AUDIO_BEAN";

    /**
     * Properties of entity AudioBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property MUrl = new Property(1, String.class, "mUrl", false, "M_URL");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Author = new Property(3, String.class, "author", false, "AUTHOR");
        public final static Property Album = new Property(4, String.class, "album", false, "ALBUM");
        public final static Property AlbumInfo = new Property(5, String.class, "albumInfo", false, "ALBUM_INFO");
        public final static Property AlbumPic = new Property(6, String.class, "albumPic", false, "ALBUM_PIC");
        public final static Property TotalTime = new Property(7, String.class, "totalTime", false, "TOTAL_TIME");
    }


    public AudioBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AudioBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AUDIO_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"M_URL\" TEXT NOT NULL UNIQUE ," + // 1: mUrl
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"AUTHOR\" TEXT NOT NULL ," + // 3: author
                "\"ALBUM\" TEXT NOT NULL ," + // 4: album
                "\"ALBUM_INFO\" TEXT NOT NULL ," + // 5: albumInfo
                "\"ALBUM_PIC\" TEXT NOT NULL ," + // 6: albumPic
                "\"TOTAL_TIME\" TEXT NOT NULL );"); // 7: totalTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AUDIO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AudioBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getMUrl());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getAuthor());
        stmt.bindString(5, entity.getAlbum());
        stmt.bindString(6, entity.getAlbumInfo());
        stmt.bindString(7, entity.getAlbumPic());
        stmt.bindString(8, entity.getTotalTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AudioBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getMUrl());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getAuthor());
        stmt.bindString(5, entity.getAlbum());
        stmt.bindString(6, entity.getAlbumInfo());
        stmt.bindString(7, entity.getAlbumPic());
        stmt.bindString(8, entity.getTotalTime());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public AudioBean readEntity(Cursor cursor, int offset) {
        AudioBean entity = new AudioBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // mUrl
            cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // author
            cursor.getString(offset + 4), // album
            cursor.getString(offset + 5), // albumInfo
            cursor.getString(offset + 6), // albumPic
            cursor.getString(offset + 7) // totalTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AudioBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMUrl(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setAuthor(cursor.getString(offset + 3));
        entity.setAlbum(cursor.getString(offset + 4));
        entity.setAlbumInfo(cursor.getString(offset + 5));
        entity.setAlbumPic(cursor.getString(offset + 6));
        entity.setTotalTime(cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(AudioBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(AudioBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AudioBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
